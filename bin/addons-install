#!/usr/bin/env python
from __future__ import print_function
import sys
from argparse import ArgumentParser
from subprocess import check_call
from odoobaselib import addons_config, CORE, PRIVATE, logging

# Define CLI options
parser = ArgumentParser(description="Install all available addons")
parser.add_argument(
    "-c", "--core", action="store_true",
    help="Install all Odoo core addons")
parser.add_argument(
    "-e", "--extra", action="store_true",
    help="Install all extra addons")
parser.add_argument(
    "-l", "--list", action="store_true",
    help="Only list addons instead of installing them")
parser.add_argument(
    "-p", "--private", action="store_true",
    help="Install all private addons")
parser.add_argument(
    "-u", "--update", action="store_true",
    help="Update addons instead of installing them")

# Check no CLI conflicts
args = parser.parse_args()
if not (args.private or args.core or args.extra):
    parser.error("You have to choose an option at least")
if args.list and args.update:
    parser.error("Cannot --list and --update together")

# Generate the matching addons set
addons = set()
for addon, repo in addons_config():
    private_ok = args.private and repo == PRIVATE
    core_ok = args.core and repo == CORE
    if private_ok or core_ok or args.extra:
        addons.add(addon)

# Do the required action
if not addons:
    parser.error("No addons found")
addons = ",".join(sorted(addons))
if args.list:
    print(addons)
else:
    logging.info("Installing addons %s", addons)
    check_call(["odoo", "--stop-after-init",
                "--update" if args.update else "--init", addons])
